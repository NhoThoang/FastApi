import mysql.connector

# C·∫•u h√¨nh k·∫øt n·ªëi MySQL
DATABASE_CONFIG = {
    'user': 'flask',
    'password': 'km@22071994',
    'host': '192.168.5.11',
    'port': 3307,
    'database': 'flask'
}

def check_log_buffer_status():
    connection = mysql.connector.connect(**DATABASE_CONFIG)
    cursor = connection.cursor()

    # L·∫•y k√≠ch th∆∞·ªõc b·ªô ƒë·ªám log
    cursor.execute("SHOW VARIABLES LIKE 'innodb_log_buffer_size'")
    log_buffer_size = cursor.fetchone()

    # L·∫•y s·ªë byte ƒë√£ ƒë∆∞·ª£c ghi v√†o log
    cursor.execute("SHOW GLOBAL STATUS LIKE 'Innodb_log_written'")
    log_written = cursor.fetchone()

    # L·∫•y s·ªë byte ƒë√£ ƒë∆∞·ª£c flush ra ƒëƒ©a
    cursor.execute("SHOW GLOBAL STATUS LIKE 'Innodb_log_flushed'")
    log_flushed = cursor.fetchone()

    cursor.close()
    connection.close()
    print(f"log_buffer_size: {log_buffer_size}")
    print(f"log_written: {log_written}")
    print(f"log_flushed: {log_flushed}")
    if log_buffer_size and log_written and log_flushed:
        log_buffer_size_value = int(log_buffer_size[1])
        log_written_value = int(log_written[1])
        log_flushed_value = int(log_flushed[1])

        print(f"innodb_log_buffer_size: {log_buffer_size_value} bytes")
        print(f"Innodb_log_written: {log_written_value} bytes")
        print(f"Innodb_log_flushed: {log_flushed_value} bytes")

        # Ki·ªÉm tra xem log buffer c√≥ th·ªÉ b·ªã tr√†n kh√¥ng
        if log_written_value - log_flushed_value > log_buffer_size_value:
            print("‚ö†Ô∏è Log buffer c√≥ th·ªÉ b·ªã tr√†n, c·∫ßn xem x√©t tƒÉng k√≠ch th∆∞·ªõc log buffer.")
        else:
            print("‚úÖ Log buffer ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")

    else:
        print("Kho·∫°i t·∫°o b·ªô ƒë·ªám log ho·∫°t ƒë·ªông. Vui l·ªìng ki·ªÉm tra c·∫•u h√¨nh MySQL.")


def get_binlog_cache_size():
    connection = mysql.connector.connect(**DATABASE_CONFIG)
    cursor = connection.cursor()

    cursor.execute("SHOW VARIABLES LIKE 'binlog_cache_size'")
    result = cursor.fetchone()
    cursor.close()
    connection.close()

    if result:
        binlog_cache_size = int(result[1])
        print(f"binlog_cache_size: {binlog_cache_size:,} bytes")  # In gi√° tr·ªã v·ªõi ƒë·ªãnh d·∫°ng c√≥ d·∫•u ph·∫©y
    else:
        print("Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° tr·ªã binlog_cache_size.")




def check_binlog_cache():
    connection = mysql.connector.connect(**DATABASE_CONFIG)
    cursor = connection.cursor()

    # Th·ª±c thi c√¢u l·ªánh ƒë·ªÉ l·∫•y th√¥ng s·ªë binlog cache
    cursor.execute("SHOW GLOBAL STATUS LIKE 'Binlog_cache%'")
    result = cursor.fetchall()
    
    cursor.close()
    connection.close()

    # Ki·ªÉm tra v√† in k·∫øt qu·∫£
    binlog_cache_use = None
    binlog_cache_disk_use = None

    for row in result:
        if row[0] == 'Binlog_cache_use':
            binlog_cache_use = int(row[1])
        elif row[0] == 'Binlog_cache_disk_use':
            binlog_cache_disk_use = int(row[1])

    if binlog_cache_disk_use > 0:
        print(f"‚ö†Ô∏è B·ªô ƒë·ªám binlog ƒë√£ b·ªã tr√†n {binlog_cache_disk_use} l·∫ßn.")
    else:
        print("‚úÖ B·ªô ƒë·ªám binlog ch∆∞a b·ªã tr√†n.")

    print(f"Binlog cache ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng {binlog_cache_use} l·∫ßn.")

# G·ªçi h√†m ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng binlog cache
check_binlog_cache()



def get_cache_hit_ratio():
    """L·∫•y Cache Hit Ratio v√† c√°c cache variables t·ª´ MySQL"""
    # K·∫øt n·ªëi ƒë·∫øn MySQL
    connection = mysql.connector.connect(**DATABASE_CONFIG)
    cursor = connection.cursor()

    try:
        # L·∫•y c√°c bi·∫øn v·ªÅ b·ªô ƒë·ªám v√† cache
        cursor.execute("SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read%'")
        result = cursor.fetchall()
        buffer_pool_stats = {row[0]: int(row[1]) for row in result}

        # T√≠nh Cache Hit Ratio
        if buffer_pool_stats.get("Innodb_buffer_pool_read_requests", 0) > 0:
            cache_hit_ratio = (1 - (buffer_pool_stats["Innodb_buffer_pool_reads"] / 
                                     buffer_pool_stats["Innodb_buffer_pool_read_requests"])) * 100
        else:
            cache_hit_ratio = 0
        
        return cache_hit_ratio  # Tr·∫£ v·ªÅ t·ª∑ l·ªá cache hit

    finally:
        cursor.close()
        connection.close()

def get_cache_variables(variable):
    """L·∫•y gi√° tr·ªã c·ªßa bi·∫øn cache t·ª´ MySQL"""
    # K·∫øt n·ªëi ƒë·∫øn MySQL
    connection = mysql.connector.connect(**DATABASE_CONFIG)
    cursor = connection.cursor()

    try:
        cursor.execute(f"SHOW VARIABLES LIKE '{variable}'")
        result = cursor.fetchone()
        if result:
            return result[1]  # Tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa bi·∫øn cache
    finally:
        cursor.close()
        connection.close()

def main():
    # L·∫•y t·ª∑ l·ªá cache hit
    cache_hit_ratio = get_cache_hit_ratio()
    print(f"üî• Cache Hit Ratio: {cache_hit_ratio:.2f}%")  # In k·∫øt qu·∫£ Cache Hit Ratio
    
    # L·∫•y v√† in c√°c bi·∫øn cache
    variables = ["innodb_buffer_pool_size", "innodb_log_buffer_size", "binlog_cache_size", "thread_cache_size"]
    for variable in variables:
        value = get_cache_variables(variable)
        print(f"{variable}: {int(value):,}")  # In gi√° tr·ªã c·ªßa c√°c bi·∫øn cache

# Ch·∫°y h√†m ch√≠nh
main()
