import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

# C·∫•u h√¨nh Async MySQL (asyncmy)
DATABASE_URL = "mysql+asyncmy://flask:km%4022071994@192.168.5.11:3307/flask"

# T·∫°o engine async
async_engine = create_async_engine(DATABASE_URL, echo=True)

# T·∫°o session async
AsyncSessionLocal = sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def get_cache_hit_ratio():
    """L·∫•y Cache Hit Ratio v√† c√°c cache variables t·ª´ MySQL InnoDB"""
    async with async_engine.connect() as conn:
        # L·∫•y c√°c bi·∫øn v·ªÅ b·ªô ƒë·ªám v√† cache
        result = await conn.execute(text("SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read%'"))
        buffer_pool_stats = {row[0]: int(row[1]) for row in result}
        # T√≠nh Cache Hit Ratio
        if buffer_pool_stats.get("Innodb_buffer_pool_read_requests", 0) > 0:
            cache_hit_ratio = (1 - (buffer_pool_stats["Innodb_buffer_pool_reads"] / 
                                     buffer_pool_stats["Innodb_buffer_pool_read_requests"])) * 100
        else:
            cache_hit_ratio = 0
        return cache_hit_ratio  # Tr·∫£ v·ªÅ t·ª∑ l·ªá cache hit

async def get_cache_variables(variable):
    """L·∫•y gi√° tr·ªã c·ªßa bi·∫øn cache t·ª´ MySQL"""
    async with async_engine.connect() as conn:
        result = await conn.execute(text(f"SHOW VARIABLES LIKE '{variable}'"))
        var_value = result.fetchone()
        if var_value:
            return var_value[1]  # Tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa bi·∫øn cache

# H√†m ch√≠nh ƒë·ªÉ t·∫°o task v√† in k·∫øt qu·∫£
async def main():
    # T·∫°o task b·∫•t ƒë·ªìng b·ªô
    # task_cache_hit_ratio = asyncio.create_task(get_cache_hit_ratio())
    # # Ch·ªù t·∫•t c·∫£ c√°c task ho√†n th√†nh v√† l·∫•y k·∫øt qu·∫£
    # cache_hit_ratio = await task_cache_hit_ratio  # Nh·∫≠n t·ª∑ l·ªá cache hit
    # print(f"üî• Cache Hit Ratio: {cache_hit_ratio:.2f}%")  # In k·∫øt qu·∫£ Cache Hit Ratio

    # T·∫°o c√°c task cho c√°c bi·∫øn cache
    variables = ["innodb_buffer_pool_size", "innodb_log_buffer_size", "binlog_cache_size", "thread_cache_size"]
    task_cache_variables = [asyncio.create_task(get_cache_variables(variable)) for variable in variables]


    
    # Ch·ªù v√† in c√°c k·∫øt qu·∫£ c·ªßa c√°c bi·∫øn cache
    cache_variables = await asyncio.gather(*task_cache_variables)
    for variable, value in zip(variables, cache_variables):
        print(f"{variable}: {value}")  # In gi√° tr·ªã c·ªßa c√°c bi·∫øn cache

# Ch·∫°y h√†m ch√≠nh
asyncio.run(main())
